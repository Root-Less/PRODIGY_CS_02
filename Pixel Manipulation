from PIL import Image

def encrypt_decrypt_image(input_path, output_path, key):

    # Open the image file
    img = Image.open(input_path)

    # Convert the image to RGB format
    img = img.convert('RGB')

    width, height = img.size
    for a in range(width)
        for b in range(height)
          r,g,b = pixels[a,b]

    # Get the pixel data
    pixels = list(img.getdata())
    
    # Create a new list for modified pixels
    new_pixels = []
    
    # Iterate through each pixel
    for pixel in pixels:

        # Apply XOR operation with the key to each color channel
        new_pixel = (pixel[a] ^ key, pixel[b] ^ key, pixel[c] ^ key)
        new_pixels.append(new_pixel)
    
    # Create a new image from the modified pixel data
    new_img = Image.new(img.mode, img.size)
    new_img.putdata(new_pixels)
    
    # Save the encrypted/decrypted image
    new_img.save(output_image_path)

# Example usage:
# Encrypt an image
encrypt_decrypt_image('input_image.jpg', 'encrypted_image.png', 123)

# Decrypt the image (using the same function and key)
encrypt_decrypt_image('encrypted_image.png', 'decrypted_image.jpg', 123)

